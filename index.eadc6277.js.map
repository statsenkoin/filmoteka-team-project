{"mappings":"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","sources":["src/js/themoviedb-api-service.js","src/js/custom-pagination.js","src/js/filmoteka.js","src/js/markups.js"],"sourcesContent":["/**\n * API ключ (v3 auth)\n * e55542ecb6aab3d889d16953eac82937\n * \n * Приклад API-запиту\n * https://api.themoviedb.org/3/movie/550?api_key=e55542ecb6aab3d889d16953eac82937\n * \n * Токен доступу для читання API (v4 auth)\neyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJlNTU1NDJlY2I2YWFiM2Q4ODlkMTY5NTNlYWM4MjkzNyIsInN1YiI6IjYzY2NmY2QxOWE2NDM1MDBhZTAzODI3YiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ZrJwlyhckYNnJMhcHP9AOOvED0EU5i-2cuiwVbINE00\n */\n\nconst API_KEY = 'e55542ecb6aab3d889d16953eac82937';\nconst URL = 'https://api.themoviedb.org/3';\nconst QUERY_TRENDING = '/trending/movie/week';\nconst QUERY_GENRE = '/genre/movie/list';\n\nexport async function fetchTrending(page) {\n  try {\n    const responce = fetch(\n      `${URL}${QUERY_TRENDING}?api_key=${API_KEY}&page=${page}`\n    );\n    return (await responce).json();\n  } catch (error) {\n    return console.log('error :>> ', error);\n  }\n}\n\nasync function fetchGenre() {\n  try {\n    const responce = fetch(`${URL}${QUERY_GENRE}?api_key=${API_KEY}`);\n    return (await responce).json();\n  } catch (error) {\n    return console.log('error :>> ', error);\n  }\n}\n\nexport async function getGenreList() {\n  const data = await fetchGenre();\n  return data.genres;\n}\n// export function getGenreById(genre_ids) {\n//   return genreList\n//     .filter(genre => genre_ids.includes(genre.id))\n//     .map(item => item.name)\n//     .join(', ');\n// }\n","// https://jasonwatmore.com/post/2018/08/07/javascript-pure-pagination-logic-in-vanilla-js-typescript\n// ===== external vars =======================================================\n// let totalPages = 100; // uncomment to test\n// let currentPage = 1; // uncomment to test\n// const paginationRef = document.querySelector('.pagination'); // uncomment to test\n// paginationRef.addEventListener('click', onPaginationButtonClick);\n// ===========================================================================\n// ============================================================================\nlet maxPages = 9; //maximum number of page navigation links to display\nlet output;\nlet currentPage = 1;\nlet totalPages;\nlet paginationElem;\n\nlet targetPage;\n\n// ============================================================================\n// ===== external code =======================================================\n\n// updatePagination(currentPage, totalPages, paginationRef);\n\n// function onPaginationButtonClick(event) {\n//   currentPage = getCurrentPage(event);\n//   updatePagination(currentPage, totalPages, paginationRef);\n//   // await fetch('...currentPage')\n// }\n// ============================================================================\n\n/**\n * to export - marking up pagination line\n * @param {Number} page - the current active page\n * @param {Number} pages - the total number of pages\n * @param {DOM element} paginationRef - where to put pagination line\n */\nexport function updatePagination(page, pages, paginationRef) {\n  paginationElem = paginationRef;\n  currentPage = page;\n  totalPages = pages;\n  output = paginate(currentPage, totalPages);\n  markupPagination(output, paginationElem);\n}\n\n/**\n *\n * @param {event} event click on button element\n * @returns currentPage\n */\nexport function getCurrentPage(event) {\n  if (event.target.nodeName !== 'BUTTON') return;\n  const targetPageText = event.target.textContent;\n\n  if (!isNaN(Number(targetPageText))) targetPage = Number(targetPageText);\n  if (targetPageText === '>') {\n    targetPage = currentPage === totalPages ? totalPages : currentPage + 1;\n  }\n  if (targetPageText === '<') {\n    targetPage = currentPage === 1 ? 1 : currentPage - 1;\n  }\n  if (targetPageText === ' ...') targetPage = currentPage - (maxPages - 4);\n  if (targetPageText === '... ') targetPage = currentPage + (maxPages - 4);\n  currentPage = targetPage;\n  return currentPage;\n}\n\n/**\n *\n * @param {Number} currentPage - the current active page\n * @param {Number} totalPages - the total number of pages\n * @returns {Array} of text content for buttons in pagination line\n */\nfunction paginate(currentPage, totalPages) {\n  const output = [];\n  let startPage;\n  let endPage;\n  const offsetPages = Math.floor(maxPages / 2);\n\n  if (currentPage < 1) {\n    currentPage = 1;\n  } else if (currentPage > totalPages) {\n    currentPage = totalPages;\n  }\n\n  if (totalPages <= maxPages) {\n    startPage = 1;\n    endPage = totalPages;\n  } else {\n    if (currentPage <= offsetPages) {\n      startPage = 1;\n      endPage = maxPages;\n    } else if (currentPage + offsetPages >= totalPages) {\n      startPage = totalPages - offsetPages * 2;\n      endPage = totalPages;\n    } else {\n      startPage = currentPage - offsetPages;\n      endPage = currentPage + offsetPages;\n    }\n  }\n  for (let i = startPage; i <= endPage; i += 1) {\n    output.push(i);\n  }\n\n  if (maxPages >= 9) {\n    output.splice(0, 1, 1);\n    output.splice(output.length - 1, 1, totalPages);\n    if (currentPage - 1 > offsetPages && totalPages > maxPages) {\n      output.splice(1, 1, ' ...');\n    }\n    if (currentPage + 1 + offsetPages < totalPages && totalPages > maxPages)\n      output.splice(output.length - 2, 1, '... ');\n  }\n  return output;\n}\n\n/**\n * marking up pagination line\n * @param {Array} output - text content for buttons in pagination line output\n * @param {DOM element} paginationElem - where to put pagination line\n */\nfunction markupPagination(output, paginationElem) {\n  let markup = output.reduce((acc, item) => {\n    const pagiClass =\n      item === currentPage\n        ? 'class=\"pagination-button pagination-button-current\"'\n        : 'class=\"pagination-button\"';\n    return (acc += `<button type=\"button\" ${pagiClass}>${item}</button>`);\n  }, ``);\n  if (totalPages > maxPages) {\n    markup =\n      `<button type=\"button\" class=\"pagination-button\">&lt;</button>` + markup;\n    markup += `<button type=\"button\" class=\"pagination-button\">&gt;</button>`;\n  }\n  // &#8249; = < &lt;\n  // &#8250; = >\n\n  paginationElem.innerHTML = '';\n  paginationElem.insertAdjacentHTML('beforeend', markup);\n}\n","import { fetchTrending, getGenreList } from './themoviedb-api-service';\nimport { markupTrending, markupModalFilmInfo } from './markups';\nimport { updatePagination, getCurrentPage } from './custom-pagination';\n\nlet filmList;\n\nconst gallery = document.querySelector('.gallery');\ngallery.addEventListener('click', onCardClick);\n\nconst modalFilmInfo = document.querySelector('.modal-film-info');\n\n// ===================================================================\nlet totalPages = 1;\nlet currentPage = 1;\nlet genreList;\nconst paginationRef = document.querySelector('.pagination');\npaginationRef.addEventListener('click', onPaginationButtonClick);\n// ===================================================================\n\ninitGallery();\n\nexport { genreList };\n\n// ===================================================================\n\nasync function onPaginationButtonClick(event) {\n  const targetPage = getCurrentPage(event);\n  if (targetPage === currentPage) return;\n  currentPage = targetPage;\n\n  await updateGallery();\n}\n// ===================================================================\n\nasync function initGallery() {\n  genreList = await getGenreList();\n  await updateGallery();\n}\n\nasync function updateGallery() {\n  const data = await fetchTrending(currentPage);\n  filmList = data.results;\n  totalPages = data.total_pages;\n  markupTrending(filmList, gallery);\n  updatePagination(currentPage, totalPages, paginationRef);\n}\n\nfunction onCardClick(event) {\n  const filmBox = event.target.closest('.film-box');\n  if (!filmBox) return;\n  const filmBoxId = Number(filmBox.dataset.id);\n  const targetFilm = filmList.find(film => film.id === filmBoxId);\n  markupModalFilmInfo(targetFilm, modalFilmInfo);\n}\n","// import { getGenreById } from './themoviedb-api-service';\nimport { genreList } from './filmoteka';\n\nconst IMAGE_URL = 'https://image.tmdb.org/t/p/w300';\n\nfunction getGenreById(genre_ids) {\n  return genreList\n    .filter(genre => genre_ids.includes(genre.id))\n    .map(item => item.name)\n    .join(', ');\n}\n\nexport async function markupTrending(filmList, gallery) {\n  let markup = filmList.reduce(\n    (acc, { poster_path, release_date, genre_ids, id, original_title }) => {\n      const genreString = getGenreById(genre_ids);\n      return (acc += `<div class=\"film-box\" data-id=\"${id}\">\n      <img class=\"film-poster\"src=\"${IMAGE_URL}${poster_path}\">\n      <p>${original_title}</p>\n      <p> ${genreString}</p>\n      <p> ${parseInt(release_date)}</p>\n      <p>id: ${id}</p>\n      </div>`);\n    },\n    ``\n  );\n  gallery.innerHTML = markup;\n}\n\nexport async function markupModalFilmInfo(targetFilm, modalFilmInfo) {\n  const {\n    title,\n    poster_path,\n    overview,\n    genre_ids,\n    id,\n    original_title,\n    popularity,\n    vote_count,\n    vote_average,\n  } = targetFilm;\n  const genreString = getGenreById(genre_ids);\n  const markup = `<div class=\"film-info\">\n         <img src=\"${IMAGE_URL}${poster_path}\">\n         <div class=\"film-info-wrapper\">\n           <p>${title}</p>\n           <p>Vote ${vote_average}</p>\n           <p>Votes ${vote_count}</p>\n           <p>Popularity ${popularity}</p>\n           <p>Original Title ${original_title}</p>\n           <p>Genre ${genreString}</p>\n           <p>ABOUT</p>\n           <p>${overview}</p>\n           <p>id: ${id}</p>\n           <button type=\"button\">Add to watched</button>\n           <button type=\"button\">Add to queue</button>\n         </div>\n        </div>`;\n\n  modalFilmInfo.innerHTML = markup;\n}\n"],"names":["async","$dd75f990e59a30d4$export$366c886a9138e8db","page","responce","fetch","json","error","console","log","$dd75f990e59a30d4$export$321e906c11f8df73","$dd75f990e59a30d4$var$fetchGenre","genres","$b7da7886b6ae1331$var$output","$b7da7886b6ae1331$var$totalPages","$b7da7886b6ae1331$var$paginationElem","$b7da7886b6ae1331$var$targetPage","$c848cac843f338cf$var$filmList","$b7da7886b6ae1331$var$currentPage","$b7da7886b6ae1331$export$909ec5aabce1b1f7","pages","paginationRef","currentPage1","totalPages1","output1","startPage","endPage","offsetPages","Math","floor","$b7da7886b6ae1331$var$maxPages","i","push","splice","length","$b7da7886b6ae1331$var$paginate","output2","paginationElem1","markup","reduce","acc","item","innerHTML","insertAdjacentHTML","$b7da7886b6ae1331$var$markupPagination","$b7da7886b6ae1331$export$7945ba8eb1c827e6","event","target","nodeName","targetPageText","textContent","isNaN","Number","$c848cac843f338cf$var$gallery","document","querySelector","addEventListener","filmBox","closest","filmBoxId","dataset","id","$b57a998cd3046280$export$5a4ebf6bfd514978","find","film","$c848cac843f338cf$var$modalFilmInfo","$c848cac843f338cf$export$a60e10dab2b13b4f","$c848cac843f338cf$var$totalPages","$c848cac843f338cf$var$currentPage","$c848cac843f338cf$var$paginationRef","$c848cac843f338cf$var$updateGallery","data","results","total_pages","$b57a998cd3046280$export$e3073cde6ea8798e","targetPage","$c848cac843f338cf$var$initGallery","$b57a998cd3046280$var$getGenreById","genre_ids","filter","genre","includes","map","name","join","filmList","gallery","poster_path","release_date","original_title","parseInt","targetFilm","modalFilmInfo","title","overview","popularity","vote_count","vote_average"],"version":3,"file":"index.eadc6277.js.map"}